// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(STAFF)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  forms    Form[]      @relation("FormCreator")
  responses FormResponse[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Form {
  id          String   @id @default(cuid())
  title       String
  description String?
  isActive    Boolean  @default(true)
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  createdBy   String
  creator     User     @relation("FormCreator", fields: [createdBy], references: [id])
  
  fields      FormField[]
  responses   FormResponse[]
}

model FormField {
  id          String      @id @default(cuid())
  formId      String
  label       String
  type        FieldType
  required    Boolean     @default(false)
  order       Int
  options     String[]    // For select, radio, checkbox fields
  validation  String?     // JSON string for validation rules
  
  form        Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
  responses   FieldResponse[]
  
  @@unique([formId, order])
}

model FormResponse {
  id        String   @id @default(cuid())
  formId    String
  userId    String
  submittedAt DateTime @default(now())
  
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
  fields    FieldResponse[]
}

model FieldResponse {
  id           String     @id @default(cuid())
  responseId   String
  fieldId      String
  value        String     @db.Text
  
  response     FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field        FormField    @relation(fields: [fieldId], references: [id])
  
  @@unique([responseId, fieldId])
}

enum UserRole {
  STAFF
  ADMIN
  SUPER_ADMIN
}

enum FieldType {
  TEXT
  TEXTAREA
  EMAIL
  NUMBER
  DATE
  SELECT
  RADIO
  CHECKBOX
  FILE
} 